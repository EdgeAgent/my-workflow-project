{
  "name": "AI Phone Agent - Complete Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "incoming-call",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "8a390d45-8224-4509-91ae-65b78bb1d180",
      "name": "Webhook - Incoming Call",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -4112,
        -64
      ],
      "webhookId": "call-webhook"
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "d8ddb4fe-04bf-45a9-af2d-192cf79966c3",
      "name": "Twilio - Greeting",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        -3904,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "0987a96a-a1d6-4b53-b47c-e0794c379a4b",
      "name": "Twilio - Record Name",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        -3680,
        -64
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.transcriptionUrl }}",
        "options": {}
      },
      "id": "a74f4fec-8444-4399-b690-6756c86395ce",
      "name": "HTTP Request - Get Transcription",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -3456,
        -64
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "55963702-8b1e-4f19-b630-dd8c58afcbbb",
      "name": "Set - Customer Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        -3232,
        -64
      ]
    },
    {
      "parameters": {
        "resource": "chat"
      },
      "id": "e8f7c64b-1c81-490c-8603-d1424c49bd32",
      "name": "OpenAI - Process Name",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        -3024,
        -64
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a54dae03-b244-4e38-b7ef-4dff43d70c54",
      "name": "Set - AI Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        -2800,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "5dcc74c0-df2c-4458-a787-810324b35e3e",
      "name": "Twilio - Say Response",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        -2576,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "ad6b1427-6a4a-4332-8114-7cd72cf2208a",
      "name": "Twilio - Record Need",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        -2352,
        -64
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.transcriptionUrl }}",
        "options": {}
      },
      "id": "c7fcd811-731d-4251-9baa-6b0cd639c6bf",
      "name": "HTTP Request - Get Need Transcription",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -2144,
        -64
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "063be604-f7ac-4fa6-87e0-2b51affee680",
      "name": "Set - Customer Need",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        -1920,
        -64
      ]
    },
    {
      "parameters": {
        "resource": "chat"
      },
      "id": "0ea91c04-0d6f-4a2c-9657-89da5813d20a",
      "name": "OpenAI - Qualify Customer",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        -1696,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "d93df5eb-7555-4e6b-a362-0e72eb89e73d",
      "name": "Twilio - Ask Qualifying Questions",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        -1472,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "d4eff4e8-bd20-4371-8f11-7948eb3c57ad",
      "name": "Twilio - Record Response",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        -1264,
        -64
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.transcriptionUrl }}",
        "options": {}
      },
      "id": "1b5c4aad-f975-4d7d-a4b1-9c2a6551ccd4",
      "name": "HTTP Request - Get Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1040,
        -64
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2d38956e-a037-4f29-80ca-7e33edbd7a57",
      "name": "Set - Qualification Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        -816,
        -64
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": ""
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.qualification_response.toLowerCase() }}",
              "rightValue": "appointment",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "2",
              "leftValue": "={{ $json.qualification_response.toLowerCase() }}",
              "rightValue": "book",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "3",
              "leftValue": "={{ $json.qualification_response.toLowerCase() }}",
              "rightValue": "schedule",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "4",
              "leftValue": "={{ $json.qualification_response.toLowerCase() }}",
              "rightValue": "yes",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "b9aad767-70d5-4f55-a5b1-a48f05abfb48",
      "name": "IF - Wants Appointment",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -592,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "options": {
          "timeMin": "={{ $now.toISO() }}",
          "timeMax": "={{ $now.plus({days: 14}).toISO() }}"
        }
      },
      "id": "d1871d5f-a06d-4a67-a7a2-593fb2edf5ab",
      "name": "Google Calendar - Get Events",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [
        -384,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get all calendar events\nconst events = $input.all();\n\n// Define business hours\nconst businessHours = { start: 9, end: 17 };\nconst workDays = [1, 2, 3, 4, 5]; // Mon-Fri\n\n// Generate available slots\nconst slots = [];\nconst now = new Date();\n\n// Check next 14 days\nfor (let dayOffset = 1; dayOffset <= 14; dayOffset++) {\n  const checkDate = new Date(now);\n  checkDate.setDate(checkDate.getDate() + dayOffset);\n  checkDate.setHours(0, 0, 0, 0);\n  \n  // Skip weekends\n  if (!workDays.includes(checkDate.getDay())) {\n    continue;\n  }\n  \n  // Check each hour\n  for (let hour = businessHours.start; hour < businessHours.end; hour++) {\n    const slotStart = new Date(checkDate);\n    slotStart.setHours(hour, 0, 0, 0);\n    \n    const slotEnd = new Date(slotStart);\n    slotEnd.setHours(hour + 1, 0, 0, 0);\n    \n    // Check if slot conflicts with any event\n    const isAvailable = !events.some(event => {\n      if (!event.json.start || !event.json.end) return false;\n      \n      const eventStart = new Date(event.json.start.dateTime || event.json.start.date);\n      const eventEnd = new Date(event.json.end.dateTime || event.json.end.date);\n      \n      return (slotStart < eventEnd && slotEnd > eventStart);\n    });\n    \n    if (isAvailable) {\n      slots.push({\n        json: {\n          slot_number: slots.length + 1,\n          date: slotStart.toLocaleDateString('en-US', { \n            weekday: 'long', \n            month: 'long', \n            day: 'numeric' \n          }),\n          time: slotStart.toLocaleTimeString('en-US', { \n            hour: 'numeric', \n            minute: '2-digit',\n            hour12: true\n          }),\n          datetime_iso: slotStart.toISOString(),\n          datetime_end: slotEnd.toISOString()\n        }\n      });\n    }\n    \n    // Limit to first 5 available slots\n    if (slots.length >= 5) break;\n  }\n  \n  if (slots.length >= 5) break;\n}\n\nreturn slots;"
      },
      "id": "ca1191ee-ae0e-4e73-a6de-67ca8793c21d",
      "name": "Code - Calculate Available Slots",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        -176
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {}
          ]
        },
        "options": {}
      },
      "id": "e50be4b6-f791-4d33-acfb-3bcf562f589b",
      "name": "Merge - Combine Slots",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        64,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get all slots\nconst slots = $input.all();\n\n// Format slots for AI\nlet slotText = '';\nslots.forEach((slot, index) => {\n  slotText += `${index + 1}. ${slot.json.date} at ${slot.json.time}\\n`;\n});\n\n// Return combined data\nreturn [{\n  json: {\n    available_slots: slotText,\n    slots_array: slots.map(s => s.json),\n    customer_name: $('Set - AI Response').first().json.extracted_name,\n    customer_need: $('Set - Customer Need').first().json.customer_need\n  }\n}];"
      },
      "id": "366bf6f3-5edd-4c3a-a54d-67f79cd9413a",
      "name": "Code - Format Slots",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        -176
      ]
    },
    {
      "parameters": {
        "resource": "chat"
      },
      "id": "1414cf1e-950c-457b-a8dc-6a5aba44bf30",
      "name": "OpenAI - Offer Slots",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        512,
        -176
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "01c0a71b-3bed-40b6-92e0-8320e23943a1",
      "name": "Twilio - Offer Times",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        736,
        -176
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "5501bae9-03be-4771-bdb1-c7a038b4b632",
      "name": "Twilio - Record Choice",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        944,
        -176
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.transcriptionUrl }}",
        "options": {}
      },
      "id": "fb64f6f8-8c2c-4d56-9665-ed01d8d436db",
      "name": "HTTP Request - Get Choice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1168,
        -176
      ]
    },
    {
      "parameters": {
        "resource": "chat"
      },
      "id": "fda4a9a1-ec7a-4e73-9a14-7f0f16a8a842",
      "name": "OpenAI - Parse Choice",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        1392,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the slot number from AI\nconst slotNumber = parseInt($json.message.content.trim());\n\n// Get slots array\nconst slots = $node['Code - Format Slots'].first().json.slots_array;\n\n// Get the selected slot\nconst selectedSlot = slots[slotNumber - 1];\n\nif (!selectedSlot) {\n  throw new Error('Invalid slot selection');\n}\n\nreturn [{\n  json: {\n    ...selectedSlot,\n    customer_name: $node['Set - AI Response'].first().json.extracted_name,\n    customer_need: $node['Set - Customer Need'].first().json.customer_need,\n    phone_number: $node['Set - Customer Info'].first().json.phone_number,\n    call_sid: $node['Set - Customer Info'].first().json.call_sid\n  }\n}];"
      },
      "id": "6dc386c5-50b0-49e0-8c2d-465e0a039f0d",
      "name": "Code - Get Selected Slot",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1616,
        -176
      ]
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "start": "={{ $json.datetime_iso }}",
        "end": "={{ $json.datetime_end }}",
        "additionalFields": {}
      },
      "id": "a7ba7a77-2206-47de-bab0-c4f31226ef00",
      "name": "Google Calendar - Create Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [
        1824,
        -176
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO customers (name, phone_number, need, appointment_date, status, created_at)\nVALUES (\n  '{{ $json.customer_name }}',\n  '{{ $json.phone_number }}',\n  '{{ $json.customer_need }}',\n  '{{ $json.datetime_iso }}',\n  'appointment_booked',\n  NOW()\n);",
        "options": {}
      },
      "id": "aef88829-e8d2-4564-a17e-c2af131534d8",
      "name": "Postgres - Save Customer",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        2048,
        -176
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "817b946f-4c27-4468-92d3-b697232d6a06",
      "name": "Twilio - Confirmation",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        2272,
        -176
      ]
    },
    {
      "parameters": {
        "message": "=✅ Appointment Confirmed!\\n\\nDate: {{ $node['Code - Get Selected Slot'].json.date }}\\nTime: {{ $node['Code - Get Selected Slot'].json.time }}\\n\\nWe look forward to seeing you!\\n\\nNeed to reschedule? Call us back.",
        "options": {}
      },
      "id": "a0f3dffb-d562-44c3-8e0f-fd8231410278",
      "name": "Twilio - Send SMS",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        2496,
        -176
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C01234567",
          "mode": "id"
        },
        "messageType": "block",
        "blocksUi": {
          "blocksValues": [
            {
              "type": "section",
              "textType": "mrkdwn",
              "message": "=*🎉 New Appointment Booked!*\\n\\n*Customer:* {{ $node['Code - Get Selected Slot'].json.customer_name }}\\n*Phone:* {{ $node['Code - Get Selected Slot'].json.phone_number }}\\n*Need:* {{ $node['Code - Get Selected Slot'].json.customer_need }}\\n*Date:* {{ $node['Code - Get Selected Slot'].json.date }}\\n*Time:* {{ $node['Code - Get Selected Slot'].json.time }}"
            }
          ]
        },
        "otherOptions": {}
      },
      "id": "d430b28f-b896-47d1-bc1e-e30d178a7594",
      "name": "Slack - Notify Team",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        2704,
        -176
      ],
      "webhookId": "04091e74-f5f1-4deb-8751-76c0bf89d070"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO call_logs (customer_name, phone_number, call_sid, duration_seconds, outcome, notes, created_at)\nVALUES (\n  '{{ $node['Code - Get Selected Slot'].json.customer_name }}',\n  '{{ $node['Code - Get Selected Slot'].json.phone_number }}',\n  '{{ $node['Code - Get Selected Slot'].json.call_sid }}',\n  {{ Math.floor((Date.now() - new Date($node['Set - Customer Info'].json.timestamp).getTime()) / 1000) }},\n  'appointment_booked',\n  'Appointment: {{ $node['Code - Get Selected Slot'].json.date }} at {{ $node['Code - Get Selected Slot'].json.time }}',\n  NOW()\n);",
        "options": {}
      },
      "id": "c0815586-e5f6-473c-8b6b-1327a9308e9e",
      "name": "Postgres - Log Call",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        2928,
        -176
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "20eae2e4-d53f-4554-abd9-242d84fce318",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        3152,
        -64
      ]
    },
    {
      "parameters": {
        "resource": "chat"
      },
      "id": "fdb795e2-0302-43e7-8a8b-3f898cf2bd3c",
      "name": "OpenAI - Continue Conversation",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        -384,
        64
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "fe2545e5-03db-4c15-873b-f4e2ac709862",
      "name": "Twilio - Continue Response",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        -160,
        64
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "fe28968c-4517-421f-aa41-dccb0e2f0b75",
      "name": "Twilio - Record Follow-up",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        64,
        64
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.transcriptionUrl }}",
        "options": {}
      },
      "id": "f1af08f6-34fb-4e4e-a4bb-ff0d9bcdd6c2",
      "name": "HTTP Request - Get Follow-up",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        288,
        64
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "23c9c798-8b69-435f-b52c-1ff95af09265",
      "name": "Set - Follow-up Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        512,
        64
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": ""
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.followup_response.toLowerCase() }}",
              "rightValue": "appointment",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "2",
              "leftValue": "={{ $json.followup_response.toLowerCase() }}",
              "rightValue": "book",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "3",
              "leftValue": "={{ $json.followup_response.toLowerCase() }}",
              "rightValue": "schedule",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "4",
              "leftValue": "={{ $json.followup_response.toLowerCase() }}",
              "rightValue": "yes",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "d242d801-ce93-4a20-b1ea-c62e214c53c4",
      "name": "IF - Now Wants Appointment",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        736,
        64
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO call_logs (customer_name, phone_number, call_sid, duration_seconds, outcome, notes, created_at)\nVALUES (\n  '{{ $node['Set - AI Response'].json.extracted_name }}',\n  '{{ $node['Set - Customer Info'].json.phone_number }}',\n  '{{ $node['Set - Customer Info'].json.call_sid }}',\n  {{ Math.floor((Date.now() - new Date($node['Set - Customer Info'].json.timestamp).getTime()) / 1000) }},\n  'information_only',\n  'Customer not ready to book. Need: {{ $node['Set - Customer Need'].json.customer_need }}',\n  NOW()\n);",
        "options": {}
      },
      "id": "8d46d680-b528-47b5-913a-f40ce1fcf05b",
      "name": "Postgres - Log No Booking",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        944,
        192
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "5155b337-36a1-4302-9b8f-222906e41ccd",
      "name": "Twilio - Goodbye",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        1168,
        192
      ]
    },
    {
      "parameters": {
        "operation": "twiml",
        "options": {}
      },
      "id": "19727869-fb51-4677-b880-c36d454b5eb5",
      "name": "Twilio - Hangup",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        1392,
        192
      ]
    },
    {
      "parameters": {},
      "id": "41115179-08e1-453f-8680-97dec7b84c61",
      "name": "No Operation",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3152,
        64
      ]
    }
  ],
  "connections": {
    "Webhook - Incoming Call": {
      "main": [
        [
          {
            "node": "Twilio - Greeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Greeting": {
      "main": [
        [
          {
            "node": "Twilio - Record Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Record Name": {
      "main": [
        [
          {
            "node": "HTTP Request - Get Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Transcription": {
      "main": [
        [
          {
            "node": "Set - Customer Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Customer Info": {
      "main": [
        [
          {
            "node": "OpenAI - Process Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Process Name": {
      "main": [
        [
          {
            "node": "Set - AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - AI Response": {
      "main": [
        [
          {
            "node": "Twilio - Say Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Say Response": {
      "main": [
        [
          {
            "node": "Twilio - Record Need",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Record Need": {
      "main": [
        [
          {
            "node": "HTTP Request - Get Need Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Need Transcription": {
      "main": [
        [
          {
            "node": "Set - Customer Need",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Customer Need": {
      "main": [
        [
          {
            "node": "OpenAI - Qualify Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Qualify Customer": {
      "main": [
        [
          {
            "node": "Twilio - Ask Qualifying Questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Ask Qualifying Questions": {
      "main": [
        [
          {
            "node": "Twilio - Record Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Record Response": {
      "main": [
        [
          {
            "node": "HTTP Request - Get Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Response": {
      "main": [
        [
          {
            "node": "Set - Qualification Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Qualification Response": {
      "main": [
        [
          {
            "node": "IF - Wants Appointment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Wants Appointment": {
      "main": [
        [
          {
            "node": "Google Calendar - Get Events",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI - Continue Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar - Get Events": {
      "main": [
        [
          {
            "node": "Code - Calculate Available Slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Calculate Available Slots": {
      "main": [
        [
          {
            "node": "Merge - Combine Slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge - Combine Slots": {
      "main": [
        [
          {
            "node": "Code - Format Slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Format Slots": {
      "main": [
        [
          {
            "node": "OpenAI - Offer Slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Offer Slots": {
      "main": [
        [
          {
            "node": "Twilio - Offer Times",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Offer Times": {
      "main": [
        [
          {
            "node": "Twilio - Record Choice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Record Choice": {
      "main": [
        [
          {
            "node": "HTTP Request - Get Choice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Choice": {
      "main": [
        [
          {
            "node": "OpenAI - Parse Choice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Parse Choice": {
      "main": [
        [
          {
            "node": "Code - Get Selected Slot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Get Selected Slot": {
      "main": [
        [
          {
            "node": "Google Calendar - Create Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar - Create Event": {
      "main": [
        [
          {
            "node": "Postgres - Save Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres - Save Customer": {
      "main": [
        [
          {
            "node": "Twilio - Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Confirmation": {
      "main": [
        [
          {
            "node": "Twilio - Send SMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Send SMS": {
      "main": [
        [
          {
            "node": "Slack - Notify Team",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack - Notify Team": {
      "main": [
        [
          {
            "node": "Postgres - Log Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres - Log Call": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Continue Conversation": {
      "main": [
        [
          {
            "node": "Twilio - Continue Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Continue Response": {
      "main": [
        [
          {
            "node": "Twilio - Record Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Record Follow-up": {
      "main": [
        [
          {
            "node": "HTTP Request - Get Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Follow-up": {
      "main": [
        [
          {
            "node": "Set - Follow-up Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Follow-up Response": {
      "main": [
        [
          {
            "node": "IF - Now Wants Appointment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Now Wants Appointment": {
      "main": [
        [
          {
            "node": "Google Calendar - Get Events",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres - Log No Booking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres - Log No Booking": {
      "main": [
        [
          {
            "node": "Twilio - Goodbye",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Goodbye": {
      "main": [
        [
          {
            "node": "Twilio - Hangup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio - Hangup": {
      "main": [
        [
          {
            "node": "No Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": null
}